# -*- coding: utf-8 -*-
"""dash_aula5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oe_m9H6qK0QwPs7l2wadi3IV_twVGv0P
"""

import json
import pandas as pd
from urllib.request import urlopen

url = "https://mosaicweb.com.br/aulas/python/vendas.json"
# salvar a resposta da url
response = urlopen(url)
data_json = json.loads(response.read())
df = pd.DataFrame.from_dict(data_json)
#print(df)

#df['Data da Compra']

df['Data da Compra'] = pd.to_datetime(df['Data da Compra'], format='%d/%m/%Y')
#print(df)

#display(df)

#df['Preço'].sum()

def format_number(value, prefix = ''):
       for unit in ['', 'mil']:
                if value < 1000:
                         return f'{prefix} {value:.2f} {unit}'
                value /= 1000
       return f'{prefix} {value:.2f} milhões'

#format_number(df['Preço'].sum(), 'R$')

#format_number(df.shape[0])

df_rec_estado = df.groupby('Local da compra')[['Preço']].sum()
#print(df_rec_estado)

df_rec_estado = df.drop_duplicates(subset='Local da compra')[['Local da compra', 'lat', 'lon']]
#print(df_rec_estado)

df_rec_estado = df.groupby('Local da compra')[['Preço']].sum()
df_rec_estado = df.drop_duplicates(subset='Local da compra')[['Local da compra', 'lat',
'lon']].merge(df_rec_estado, left_on='Local da compra', right_index=True).sort_values('Preço', ascending=False)
#print(df_rec_estado)

import plotly.express as px
grafico_map_estado = px.scatter_geo(
        df_rec_estado, #estou passando o dataframe com meus dados
        lat = 'lat', #coluna latitude
        lon = 'lon', #coluna longitude
        scope = 'south america', #estou restringindo meu mapa a américa do sul
        size = 'Preço',
        template = 'seaborn',
        hover_name = 'Local da compra', #quando passar o nome em cima mostra o local
        hover_data = {'lat': False, 'lon': False},
        title = 'Receita por Estado'
)
#grafico_map_estado

df_rec_mensal = df.set_index('Data da Compra').groupby(pd.Grouper(freq='M'))['Preço'].sum().reset_index()
#print(df_rec_mensal)

df_rec_mensal['Ano'] = df_rec_mensal['Data da Compra'].dt.year
#print(df_rec_mensal)

df_rec_mensal['Mes'] = df_rec_mensal['Data da Compra'].dt.month_name()
#print(df_rec_mensal)

grafico_rec_mensal = px.line(
       df_rec_mensal,
       x = 'Mes',
       y = 'Preço',
       markers = True,
       range_y = (0, df_rec_mensal.max()),
       color = 'Ano',
       line_dash = 'Ano',
       title = 'Receita Mensal'
)
#grafico_rec_mensal.update_layout(yaxis_title = 'Receita')

grafico_rec_estado = px.bar(
        df_rec_estado.head(7),
        x = 'Local da compra',
        y = 'Preço',
        text_auto = True,
        title = 'Top Receita por Estados'
)
#grafico_rec_estado

df_rec_categoria = df.groupby('Categoria do Produto')[['Preço']].sum().sort_values('Preço', ascending=False)
#print(df_rec_categoria.head())

grafico_rec_categoria = px.bar(
        df_rec_categoria.head(7),
        text_auto = True,
        title = 'Top 7 Categorias com Maior Receita'
)
#grafico_rec_categoria

df_vendedores = pd.DataFrame(df.groupby('Vendedor')['Preço'].agg(['sum', 'count']))
#print(df_vendedores)

grafico_rec_vendedores = px.bar(
      df_vendedores[['sum']].sort_values('sum', ascending=False).head(7),
      x = 'sum',
      y = df_vendedores[['sum']].sort_values('sum', ascending=False).head(7).index,
      text_auto = True,
      title = 'Top 7 Vendedores por Receita'
)
#grafico_rec_vendedores

grafico_vendas_vendedores = px.bar(
      df_vendedores[['count']].sort_values('count', ascending=False).head(7),
      x = 'count',
      y = df_vendedores[['count']].sort_values('count', ascending=False).head(7).index,
      text_auto = True,
      title = 'Top 7 Vendedores por Venda'
)
#grafico_vendas_vendedores

!pip install -q streamlit

!npm install localtunnel

import urllib
print("SENHA/Enpoint IP para o túnel local:",urllib.request.urlopen('https://ipv4.icanhazip.com').read().decode('utf8').strip("\n"))

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# st.set_page_config(layout='wide')
# st.title("Dashboard de Vendas :shopping_trolley:")
# aba1, aba2, aba3 = st.tabs(['Dataset', 'Receita', 'Vendedores'])

!streamlit run app.py &>/content/logs.txt & npx localtunnel --port 8501

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# from dash_aula5 import *
# st.set_page_config(layout='wide')
# st.title("Dashboard de Vendas :shopping_trolley:")
# filtro_vendedor = st.sidebar.multiselect(
#     'Vendedores',
#     df['Vendedor'].unique(),
# )
# 
# if filtro_vendedor:
#     df = df[df['Vendedor'].isin(filtro_vendedor)]
# aba1, aba2, aba3, aba4 = st.tabs(['Dataset', 'Receita', 'Vendedores', 'Frete'])
# with aba1:
#       st.dataframe(df)
# with aba2:
#       coluna1, coluna2 = st.columns(2)
#       with coluna1:
#             st.metric('Receita Total', format_number(df['Preço'].sum(), 'R$'))
#             st.plotly_chart(grafico_map_estado, use_container_width=True)
#             st.plotly_chart(grafico_rec_estado, use_container_width=True)
#       with coluna2:
#             st.metric('Quantidade de Vendas', format_number(df.shape[0]))
#             st.plotly_chart(grafico_rec_mensal, use_container_width=True)
#             st.plotly_chart(grafico_rec_categoria, use_container_width=True)
# with aba3:
#       coluna1, coluna2 = st.columns(2)
#       with coluna1:
#             st.plotly_chart(grafico_rec_vendedores, use_container_width=True)
#       with coluna2:
#             st.plotly_chart(grafico_vendas_vendedores, use_container_width=True)
# with aba4:
#       coluna1, coluna2 = st.columns(2)
#       with coluna1:
#             df_frete = pd.DataFrame(df.groupby('Local da compra')['Frete'].agg(['sum', 'count']))
#             grafico_frete = px.bar(
#             df_frete[['sum']].sort_values('sum', ascending=False).head(),
#             x = 'sum',
#             y = df_frete[['sum']].sort_values('sum', ascending=False).head().index,
#             text_auto = True,
#             title = 'Top 5 maiores gastos em Frete'
# )
#             st.plotly_chart(grafico_frete, use_container_width=True)
#       with coluna2:
#             df_frete_mais_caros = df.groupby('Local da compra')[['Frete']].max().sort_values('Frete', ascending=False)
#             grafico_Fretes_mais_caros = px.bar(
#             df_frete_mais_caros.head(7),
#             text_auto = True,
#             title = 'Top 7 Fretes mais caros registrados'
# )
# 
#             st.plotly_chart(grafico_Fretes_mais_caros, use_container_width=True)
# 
#

#df['Frete'].max()

#df['Tipo de pagamento'].value_counts()

#df['Local da compra'].value_counts()

df_frete_estado = df.groupby('Local da compra')[['Frete']].sum()
#print(df_frete_estado)
#df_rec_mensal
#df_vendedores

df_frete = pd.DataFrame(df.groupby('Local da compra')['Frete'].agg(['sum', 'count']))
grafico_frete = px.bar(
      df_frete[['sum']].sort_values('sum', ascending=False).head(),
      x = 'sum',
      y = df_frete[['sum']].sort_values('sum', ascending=False).head().index,
      text_auto = True,
      title = 'Top 5 maiores gastos em Frete'
)

grafico_frete = px.bar(
      df_frete[['sum']].sort_values('sum', ascending=False).head(),
      x = 'sum',
      y = df_frete[['sum']].sort_values('sum', ascending=False).head().index,
      text_auto = True,
      title = 'Top 5 maiores gastos em Frete'
)
#grafico_frete

df_frete_mais_caros = df.groupby('Local da compra')[['Frete']].max().sort_values('Frete', ascending=False)
#print(df_frete_mais_caros.head(7))

grafico_Fretes_mais_caros = px.bar(
        df_frete_mais_caros.head(7),
        text_auto = True,
        title = 'Top 7 Fretes mais caros'
)
#grafico_Fretes_mais_caros